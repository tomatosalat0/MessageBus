<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MessageBus.Decorations</name>
    </assembly>
    <members>
        <member name="M:MessageBus.DiscardDuplicateMessageHandlerExtensions.WithDuplicateMessageDetection``1(MessageBus.IAsyncMessageEventHandler{``0})">
            <summary>
            Returns a new async handler which will detect already received messages. Already received message will get dropped silently. The default
            duplicate detection implementation will get used.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardDuplicateMessageHandlerExtensions.WithDuplicateMessageDetection``1(MessageBus.IAsyncMessageEventHandler{``0},MessageBus.Decorations.Duplications.IDuplicateDetection)">
            <summary>
            Returns a new async handler which will detect already received messages. Already received message will get dropped silently. The provided
            <paramref name="duplicateDetection"/> will get used to detect duplicates.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardDuplicateMessageHandlerExtensions.WithDuplicateMessageDetection``1(MessageBus.IMessageEventHandler{``0})">
            <summary>
            Returns a new async handler which will detect already received messages. Already received message will get dropped silently. The default
            duplicate detection implementation will get used.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardDuplicateMessageHandlerExtensions.WithDuplicateMessageDetection``1(MessageBus.IMessageEventHandler{``0},MessageBus.Decorations.Duplications.IDuplicateDetection)">
            <summary>
            Returns a new async handler which will detect already received messages. Already received message will get dropped silently. The provided
            <paramref name="duplicateDetection"/> will get used to detect duplicates.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardDuplicateMessageHandlerExtensions.WithDuplicateMessageDetection``1(MessageBus.IAsyncMessageCommandHandler{``0})">
            <summary>
            Returns a new async handler which will detect already received messages. Already received message will get dropped silently. The default
            duplicate detection implementation will get used.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardDuplicateMessageHandlerExtensions.WithDuplicateMessageDetection``1(MessageBus.IAsyncMessageCommandHandler{``0},MessageBus.Decorations.Duplications.IDuplicateDetection)">
            <summary>
            Returns a new async handler which will detect already received messages. Already received message will get dropped silently. The provided
            <paramref name="duplicateDetection"/> will get used to detect duplicates.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardDuplicateMessageHandlerExtensions.WithDuplicateMessageDetection``1(MessageBus.IMessageCommandHandler{``0})">
            <summary>
            Returns a new handler which will detect already received messages. Already received message will get dropped silently. The default
            duplicate detection implementation will get used.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardDuplicateMessageHandlerExtensions.WithDuplicateMessageDetection``1(MessageBus.IMessageCommandHandler{``0},MessageBus.Decorations.Duplications.IDuplicateDetection)">
            <summary>
            Returns a new handler which will detect already received messages. Already received message will silently get dropped. The provided
            <paramref name="duplicateDetection"/> will get used to detect duplicates.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.Decorations.Duplications.IDuplicateDetection.HandleReceivedMessage(MessageBus.MessageId)">
            <summary>
            Gets a <see cref="T:MessageBus.MessageId"/> from an incoming message. This id
            gets stored. Returns true if the <paramref name="messageId"/>
            has not been seen before, otherwise false.
            </summary>
        </member>
        <member name="M:MessageBus.Decorations.Duplications.IDuplicateDetection.ForgetMessage(MessageBus.MessageId)">
            <summary>
            Instructs the duplication detection to forget about the provided
            <paramref name="messageId"/>. A future call to <see cref="M:MessageBus.Decorations.Duplications.IDuplicateDetection.HandleReceivedMessage(MessageBus.MessageId)"/>
            must return true for the same message id again.
            </summary>
        </member>
        <member name="M:MessageBus.Decorations.Validations.IMessageValidator`1.Validate(`0)">
            <summary>
            Execute the validation for the provided <paramref name="message"/> and
            returns the result of that validation.
            </summary>
        </member>
        <member name="M:MessageBus.Decorations.Validations.IAsyncMessageValidator`1.ValidateAsync(`0)">
            <summary>
            Execute the validation for the provided <paramref name="message"/> and
            returns the result of that validation.
            </summary>
        </member>
        <member name="P:MessageBus.Decorations.Validations.IValidationResult.Errors">
            <summary>
            Contains the list of validation errors. If no
            error occured, this list will be empty.
            </summary>
        </member>
        <member name="P:MessageBus.Decorations.Validations.IValidationError.ErrorMessage">
            <summary>
            The message describing the validation problem.
            </summary>
        </member>
        <member name="P:MessageBus.Decorations.Versioning.IHasMessageVersion`1.MessageVersion">
            <summary>
            Indicates the version of this message. Note that this version is not
            a schema version. Each new message must get a new increasing version.
            If a message is coming in out of order (old version), it will get
            dropped.
            </summary>
        </member>
        <member name="M:MessageBus.Decorations.Versioning.IVersionDetection`1.HandleMessageVersion(`0)">
            <summary>
            Gets the version from an incoming message. Returns true if
            the provided <paramref name="versionId"/> is newer then the
            latest known version, otherwise false.
            </summary>
        </member>
        <member name="M:MessageBus.Decorations.Versioning.IVersionDetection`1.ForgetVersion(`0)">
            <summary>
            Instructs the version detection to forget about the provided
            <paramref name="versionId"/>. A future call to <see cref="M:MessageBus.Decorations.Versioning.IVersionDetection`1.HandleMessageVersion(`0)"/>
            must return true for the same version id again.
            </summary>
        </member>
        <member name="M:MessageBus.OnlyHandleWhenMessageHandlerExtensions.OnlyWhen``1(MessageBus.IAsyncMessageEventHandler{``0},System.Func{``0,System.Boolean})">
            <summary>
            Limit the underlying <paramref name="handler"/> to only receive messages when the provided <paramref name="precondition"/>
            returns true.
            </summary>
        </member>
        <member name="M:MessageBus.OnlyHandleWhenMessageHandlerExtensions.OnlyWhen``1(MessageBus.IAsyncMessageEventHandler{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Limit the underlying <paramref name="handler"/> to only receive messages when the provided async <paramref name="precondition"/>
            returns true.
            </summary>
        </member>
        <member name="M:MessageBus.OnlyHandleWhenMessageHandlerExtensions.OnlyWhen``1(MessageBus.IMessageEventHandler{``0},System.Func{``0,System.Boolean})">
            <summary>
            Limit the underlying <paramref name="handler"/> to only receive messages when the provided <paramref name="precondition"/>
            returns true.
            </summary>
        </member>
        <member name="M:MessageBus.AutomaticRetryMessageHandlerExtensions.WithRetryOnException``1(MessageBus.IAsyncMessageCommandHandler{``0})">
            <summary>
            Returns a new handler which will detect capture exceptions thrown by previous <paramref name="handler"/>.
            If an exception occurs, the command will get scheduled again. Note that there is no maximum retry count.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.AutomaticRetryMessageHandlerExtensions.WithRetryOnException``1(MessageBus.IAsyncMessageCommandHandler{``0},System.Func{System.Exception,System.Boolean})">
            <summary>
            Returns a new handler which will detect capture exceptions thrown by previous <paramref name="handler"/>.
            If an exception occurs and the provided <paramref name="shouldRetry"/> function returns true, the command will get scheduled again.
            Note that there is no maximum retry count.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.AutomaticRetryMessageHandlerExtensions.WithRetryOnException``1(MessageBus.IMessageCommandHandler{``0})">
            <summary>
            Returns a new handler which will detect capture exceptions thrown by previous <paramref name="handler"/>.
            If an exception occurs, the command will get scheduled again. Note that there is no maximum retry count.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.AutomaticRetryMessageHandlerExtensions.WithRetryOnException``1(MessageBus.IMessageCommandHandler{``0},System.Func{System.Exception,System.Boolean})">
            <summary>
            Returns a new handler which will detect capture exceptions thrown by previous <paramref name="handler"/>.
            If an exception occurs and the provided <paramref name="shouldRetry"/> function returns true, the command will get scheduled again.
            Note that there is no maximum retry count.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.PrependValidationHandlerExtensions.WithValidation``1(MessageBus.IAsyncMessageCommandHandler{``0},MessageBus.Decorations.Validations.IAsyncMessageValidator{``0}[])">
            <summary>
            Prepends the provided async <paramref name="validators"/> to the current <paramref name="handler"/>. These validators
            will get executed before the underlying <paramref name="handler"/> will get called. If any validator
            indicates an error, an <see cref="T:MessageBus.Decorations.Validations.MessageValidationException"/> will get thrown and the underlying handler
            won't get executed.
            </summary>
            <remarks>If the list of <paramref name="validators"/> is empty, the provided <paramref name="handler"/> will get returned.</remarks>
        </member>
        <member name="M:MessageBus.PrependValidationHandlerExtensions.WithValidation``1(MessageBus.IAsyncMessageCommandHandler{``0},MessageBus.Decorations.Validations.IMessageValidator{``0}[])">
            <summary>
            Prepends the provided <paramref name="validators"/> to the current <paramref name="handler"/>. These validators
            will get executed before the underlying <paramref name="handler"/> will get called. If any validator
            indicates an error, an <see cref="T:MessageBus.Decorations.Validations.MessageValidationException"/> will get thrown and the underlying handler
            won't get executed.
            </summary>
            <remarks>If the list of <paramref name="validators"/> is empty, the provided <paramref name="handler"/> will get returned.</remarks>
        </member>
        <member name="M:MessageBus.PrependValidationHandlerExtensions.WithValidation``1(MessageBus.IMessageCommandHandler{``0},MessageBus.Decorations.Validations.IMessageValidator{``0}[])">
            <summary>
            Prepends the provided <paramref name="validators"/> to the current <paramref name="handler"/>. These validators
            will get executed before the underlying <paramref name="handler"/> will get called. If any validator
            indicates an error, an <see cref="T:MessageBus.Decorations.Validations.MessageValidationException"/> will get thrown and the underlying handler
            won't get executed.
            </summary>
            <remarks>If the list of <paramref name="validators"/> is empty, the provided <paramref name="handler"/> will get returned.</remarks>
        </member>
        <member name="M:MessageBus.PrependValidationHandlerExtensions.WithValidation``2(MessageBus.IAsyncMessageQueryHandler{``0,``1},MessageBus.Decorations.Validations.IAsyncMessageValidator{``0}[])">
            <summary>
            Prepends the provided <paramref name="validators"/> to the current <paramref name="handler"/>. These validators
            will get executed before the underlying <paramref name="handler"/> will get called. If any validator
            indicates an error, an <see cref="T:MessageBus.Decorations.Validations.MessageValidationException"/> will get thrown and the underlying handler
            won't get executed.
            </summary>
            <remarks>If the list of <paramref name="validators"/> is empty, the provided <paramref name="handler"/> will get returned.</remarks>
        </member>
        <member name="M:MessageBus.PrependValidationHandlerExtensions.WithValidation``2(MessageBus.IAsyncMessageQueryHandler{``0,``1},MessageBus.Decorations.Validations.IMessageValidator{``0}[])">
            <summary>
            Prepends the provided <paramref name="validators"/> to the current <paramref name="handler"/>. These validators
            will get executed before the underlying <paramref name="handler"/> will get called. If any validator
            indicates an error, an <see cref="T:MessageBus.Decorations.Validations.MessageValidationException"/> will get thrown and the underlying handler
            won't get executed.
            </summary>
            <remarks>If the list of <paramref name="validators"/> is empty, the provided <paramref name="handler"/> will get returned.</remarks>
        </member>
        <member name="M:MessageBus.PrependValidationHandlerExtensions.WithValidation``2(MessageBus.IMessageQueryHandler{``0,``1},MessageBus.Decorations.Validations.IMessageValidator{``0}[])">
            <summary>
            Prepends the provided <paramref name="validators"/> to the current <paramref name="handler"/>. These validators
            will get executed before the underlying <paramref name="handler"/> will get called. If any validator
            indicates an error, an <see cref="T:MessageBus.Decorations.Validations.MessageValidationException"/> will get thrown and the underlying handler
            won't get executed.
            </summary>
            <remarks>If the list of <paramref name="validators"/> is empty, the provided <paramref name="handler"/> will get returned.</remarks>
        </member>
        <member name="M:MessageBus.PrependValidationHandlerExtensions.WithValidation``2(MessageBus.IAsyncMessageRpcHandler{``0,``1},MessageBus.Decorations.Validations.IAsyncMessageValidator{``0}[])">
            <summary>
            Prepends the provided <paramref name="validators"/> to the current <paramref name="handler"/>. These validators
            will get executed before the underlying <paramref name="handler"/> will get called. If any validator
            indicates an error, an <see cref="T:MessageBus.Decorations.Validations.MessageValidationException"/> will get thrown and the underlying handler
            won't get executed.
            </summary>
            <remarks>If the list of <paramref name="validators"/> is empty, the provided <paramref name="handler"/> will get returned.</remarks>
        </member>
        <member name="M:MessageBus.PrependValidationHandlerExtensions.WithValidation``2(MessageBus.IAsyncMessageRpcHandler{``0,``1},MessageBus.Decorations.Validations.IMessageValidator{``0}[])">
            <summary>
            Prepends the provided <paramref name="validators"/> to the current <paramref name="handler"/>. These validators
            will get executed before the underlying <paramref name="handler"/> will get called. If any validator
            indicates an error, an <see cref="T:MessageBus.Decorations.Validations.MessageValidationException"/> will get thrown and the underlying handler
            won't get executed.
            </summary>
            <remarks>If the list of <paramref name="validators"/> is empty, the provided <paramref name="handler"/> will get returned.</remarks>
        </member>
        <member name="M:MessageBus.PrependValidationHandlerExtensions.WithValidation``2(MessageBus.IMessageRpcHandler{``0,``1},MessageBus.Decorations.Validations.IMessageValidator{``0}[])">
            <summary>
            Prepends the provided <paramref name="validators"/> to the current <paramref name="handler"/>. These validators
            will get executed before the underlying <paramref name="handler"/> will get called. If any validator
            indicates an error, an <see cref="T:MessageBus.Decorations.Validations.MessageValidationException"/> will get thrown and the underlying handler
            won't get executed.
            </summary>
            <remarks>If the list of <paramref name="validators"/> is empty, the provided <paramref name="handler"/> will get returned.</remarks>
        </member>
        <member name="M:MessageBus.DiscardOldMessageVersionsHandlerExtensions.WithDiscardOldMessageVersion``2(MessageBus.IAsyncMessageEventHandler{``0})">
            <summary>
            Returns a new async handler which will detect outdated messages. Messages which have a lower or equal version compared to the latest one
            will get dropped silently. The default version handler will get used.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardOldMessageVersionsHandlerExtensions.WithDiscardOldMessageVersion``2(MessageBus.IAsyncMessageEventHandler{``0},MessageBus.Decorations.Versioning.IVersionDetection{``1})">
            <summary>
            Returns a new async handler which will detect outdated messages. Messages which have a lower or equal version compared to the latest one
            will get dropped silently. The provided <paramref name="versionDetection"/> will get used to detect outdated messages.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardOldMessageVersionsHandlerExtensions.WithDiscardOldMessageVersion``2(MessageBus.IMessageEventHandler{``0})">
            <summary>
            Returns a new handler which will detect outdated messages. Messages which have a lower or equal version compared to the latest one
            will get dropped silently. The default version handler will get used.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardOldMessageVersionsHandlerExtensions.WithDiscardOldMessageVersion``2(MessageBus.IMessageEventHandler{``0},MessageBus.Decorations.Versioning.IVersionDetection{``1})">
            <summary>
            Returns a new handler which will detect outdated messages. Messages which have a lower or equal version compared to the latest one
            will get dropped silently. The provided <paramref name="versionDetection"/> will get used to detect outdated messages.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardOldMessageVersionsHandlerExtensions.WithDiscardOldMessageVersion``2(MessageBus.IAsyncMessageCommandHandler{``0})">
            <summary>
            Returns a new async handler which will detect outdated messages. Messages which have a lower or equal version compared to the latest one
            will get dropped silently. The default version handler will get used.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardOldMessageVersionsHandlerExtensions.WithDiscardOldMessageVersion``2(MessageBus.IAsyncMessageCommandHandler{``0},MessageBus.Decorations.Versioning.IVersionDetection{``1})">
            <summary>
            Returns a new async handler which will detect outdated messages. Messages which have a lower or equal version compared to the latest one
            will get dropped silently. The provided <paramref name="versionDetection"/> will get used to detect outdated messages.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardOldMessageVersionsHandlerExtensions.WithDiscardOldMessageVersion``2(MessageBus.IMessageCommandHandler{``0})">
            <summary>
            Returns a new handler which will detect outdated messages. Messages which have a lower or equal version compared to the latest one
            will get dropped silently. The default version handler will get used.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
        <member name="M:MessageBus.DiscardOldMessageVersionsHandlerExtensions.WithDiscardOldMessageVersion``2(MessageBus.IMessageCommandHandler{``0},MessageBus.Decorations.Versioning.IVersionDetection{``1})">
            <summary>
            Returns a new handler which will detect outdated messages. Messages which have a lower or equal version compared to the latest one
            will get dropped silently. The provided <paramref name="versionDetection"/> will get used to detect outdated messages.
            </summary>
            <remarks>If the provided <paramref name="handler"/> implements <see cref="T:MessageBus.ISubscriptionAwareHandler"/>, the result
            will implement that interface as well.</remarks>
        </member>
    </members>
</doc>
